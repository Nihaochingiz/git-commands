
git init
Команда git init создает репозиторий — директорию .git, 
которая содержит все необходимые для работы Git-файлы.

git status
С помощью команды git status 
можно посмотреть статус репозитория

Следующий шаг — это коммит. 
Под этим термином понимается окончательное 
добавление в репозиторий, когда Git запоминает файл 
навсегда и следит за всеми последующими изменениями.

git commit -m 'add README.md'

Делаем commit
Флаг -m означает message

 git push

 Отправляем изменения в созданный репозиторий

 git clone
 
 Клонировать репозиторий 

 git pull --rebase

 Скачать из внешнего репозитория 
 новые коммиты и добавить их в локальный репозиторийgit remote add origin https://github.com/Nihaochingiz/git-commands.git
git branch -M main
git push -u origin main
  


$ git clone repos/git-user code-user
# Первый параметр «откуда», второй — «куда» клонировать репозиторий



## Как запушить два файла в git
git add file1 file2
git status
git config --global user.email "mail@example.com"
git config --global user.name "name"
git commit -m 'Изменили два файла'
git push
##


rm PEOPLE.md

Удаляем файлы

git restore PEOPLE.md

Восстановить файл после удаления

// Как удалить файл из рабочей директории
rm PEOPLE.md
# Любое изменение нужно добавлять в индекс
git add PEOPLE.md
git commit -m 'remove PEOPLE.md'

[main e15afd2] remove PEOPLE.md
1 file changed, 1 deletion(-)
delete mode 100644 PEOPLE.md
# Теперь этот файл пропал из рабочей директории


//у Git есть команда git rm, которая объединяет в себе удаление и подготовку к коммиту:
//git rm PEOPLE.md
# Равносильно rm + git add

git diff

Посмотреть изменения в файлах 

git diff --staged

Вывести все изменения, сделанные в рабочей директории
которые были добавлены в индекс

git mv OLD-FILENAME NEW-FILENAME

Переименовать файл


git mv newhexlet.txt hexlet2.txt 

git log

Показать список всех выполненных коммитов, 
отсортированных по дате добавления

git log -p

 флаг -p, который сразу выводит диф для каждого коммита:

git log
Ввести Q и нажать Enter
Выйти из git log

git show

У каждого коммита есть уникальный набор символов — идентификатор (еще говорят «хеш»). 
С помощью хеша можно посмотреть все изменения, сделанные в рамках одного коммита

git show 5120bea

Хеши коммитов в Git очень длинные, и ими бывает неудобно пользоваться. 
Поэтому разработчики Git добавили возможность указывать только часть хеша. 
Достаточно взять первые семь символов и подставить их в ту команду, которая работает с коммитами:


git blame <путь до файла>.

Узнать кто последним менял конкретную строчку в файле


 git grep
 /** Пример git grep Посмотреть
     Пример git grep -i  посмотреть 
     // флаг -i не учитывать регистр
**/
 Команда git grep ищет совпадение с указанной строкой во всех файлах проекта. 
 Это очень удобная команда для быстрого анализа из терминала. 
 Она удобнее обычного grep, потому что знает про игнорирование и не смотрит в директорию .git, а еще умеет искать по истории


 mkdir one
 touch two

Создать папку и файл

git clean -fd
неотслеживаемые файлы невозможно восстановить, 
у них нет старого состояния
Выполняем очистку
(-f – force, -d – directory)

 git restore

 Отмена изменений в отслеживаемых файлах

 git restore --staged <file>

 Отменить индексацию, 
 но не отменять изменения, 
 сделанные в файле

 git restore <file>

 Для файлов Измененных в рабочей директории


 # Добавляем новый коммит, который мы сразу же удалим
echo 'test' >> INFO.md
git add INFO.md
git commit -m 'update INFO.md'

[main 17a77cb] update INFO.md
 1 file changed, 1 insertion(+)
 # Важно, что мы не делаем git push

git reset --hard HEAD~

HEAD is now at 65a8ef7 Revert "remove PEOPLE.md"

# Если посмотреть `git log`, то последнего коммита там больше нет



Флаг --hard означает полное удаление


commit 50395fd7630ac657b06448f6243cc8cdd1b2b980
Author: Student <support@hexlet.io>
Date:   Wed Oct 21 16:30:25 2020 +0700

    add index.html

commit 4dc95e82647039a2a63a9665a1faba93e04b6ed7



git reset --hard HEAD~2

// Удалить два последний коммита


Крайне часто разработчики делают коммит и сразу понимают, 
что забыли добавить часть файлов через git add. 
Оставшуюся часть изменений можно дослать следующим коммитом

Есть еще один способ. 
Если изменения еще не были отправлены во внешнюю систему, 
можно добавить изменения в текущий коммит. 
Для этого во время коммита добавляется флаг --amend:

echo 'experiment with amend' >> INFO.md
echo 'experiment with amend' >> README.md
git add INFO.md
git commit -m 'add content to INFO.md and README.md'
git status
git add README.md
git commit --amend
git status



git commit --amend --no-edit
Добавить коммит, но описание коммита не изменится

Индекс в Git — это специальная промежуточная область, 
в которой хранятся изменения файлов на пути от рабочей 
директории до репозитория. При выполнении коммита в него 
попадают только те изменения, которые были добавлены в индекс. 


git add .
Добавляет абсолютно все изменения рабочей директории в индекс


git commit -am 'do something'
Добавить все изменения рабочей директории в индекс


git add -i

Показать измененные куски файлов, git будет спрашивать 
что с ними сделать

Добавлять изменения в интерактивном режиме

git add -i
p
1
s
y
q


git add -i
p 1 s y n u q
git commit -m "+2/-0"
git add -i
p 1 s y u q
git commit -m "second part of change"


git add -i
p 1 s y n u q
git commit -m "first part of change"
git add -i
p 1 s y u q
git commit -m "second part of change
git commit -m "значение из колонки staged"


git add -i
p
1
s
y

cd code-user
git add -i
p 1 s y n u q
git commit -m "first part of change"
git add -i
p 1 s y u q
git commit -m "second part of change"




# При выполнении задачи состояние репозитория могло измениться.
# Перед набором команд из списка, обновите упражнение с помощью кнопки Сброс

cd code-user/ # Переходим в директорию code-user
git add -i
patch
1
# Подтверждаем выбор нажатием Enter
s
y
n
status
quit
git commit -m '+2/-0'	




git checkout

Перемещаться по истории, 
загружая в рабочую директорию состояние кода 
на момент выполнения любого коммита


git checkout 8cf1c48 // вернуть версию на данный коммит

git checkout main // Вернуть все обратно

git branch

Узнать в какой мы директории

hexlet-git git:(main)
 гораздо надежнее и удобнее вывести текущее местоположение прямо в командной строке


 git branch
  узнать текущий загруженный коммит


 git log --graph

Вывеcти коммиты нашего проекта hexlet-git в специальном виде, который активируется опцией --graph:


git reset --hard HEAD~1
# HEAD~1 означает: взять голову и удалить один коммит, начиная от нее
# То есть мы удаляем только последний коммит

Список  всех коммитов — это main.
В терминологии Git такой список называется веткой (branch)



main-ветка должна оставаться рабочей: 
коммитить промежуточные изменения в нее нельзя, так как изменения могут сломать код. 
Но коммитить все равно надо, потому что просто небезопасно копить изменения в рабочей директории, не отправляя их в Git. 
Что делать в такой ситуации?

Гит позволяет отпочковаться от основного списка — сформировать ветку. 
То есть создается отдельный список коммитов, который идет мимо главной ветки. 
В конце разработки все коммиты из такой ветки вливаются обратно в main-ветку:

Последний коммит - это head



cd code-user/ # Переходим в директорию code-user
git switch refactoring
git reset --hard HEAD~2
git switch working-on-html
# Редактируем и сохраняем файл
# Можно использовать vim или nano
vim index.html
git add index.html
git commit -m 'fix index.html'


Git позволяет гибко настраивать игнорирование определенных файлов и директорий. 
Делается это с помощью файла .gitignore, который нужно создать в корне проекта. 
В этот файл с помощью текстового редактора добавляются файлы и директории, которые надо игнорировать



# Имя файла .gitignore
# Файл нужно создать самостоятельно

# Каждая строчка — это шаблон, по которому происходит игнорирование

# Игнорируем файл в любой директории проекта
access.log

# Игнорируем директорию в любой директории проекта
node_modules/

# Игнорируем каталог в корне рабочей директории
/coverage/

# Игнорируем все файлы с расширением sqlite3 в директории db
# При этом не игнорируются такие же файлы внутри любого вложенного каталога в db
# Например, /db/something/lala.sqlite3
/db/*.sqlite3

# Игнорировать все .txt файлы в каталоге doc/ на всех уровнях вложенности
doc/**/*.txt



Иногда бывает такое, что программист случайно уже добавил в репозиторий файл, 
который нужно проигнорировать. 
В этой ситуации недостаточно обновить правила игнорирования. 
Дополнительно придется удалить файл или директорию из Git с помощью git rm и закоммитить.



cd code-user/ # Переходим в директорию code-user
echo 'notes.txt' > .gitignore
echo 'todo.md' >> .gitignore
git rm --cached notes.txt
git commit -m 'remove notes.txt from repo'
git add hexlet.txt
git commit -m 'update hexlet.txt'
git add .gitignore
git commit -m 'add .gitignore'







git stash

# Прячем файлы
# После этой команды пропадут все измененные файлы
# независимо от того, добавлены они в индекс или нет

После выполнения всех нужных изменений в чистой рабочей директории 
можно вернуть спрятанные изменения с помощью команды 
git stash pop


touch todo.md 
echo "test" >> todo.md
echo "stash не трогает новые файлы, которые еще не добавлены в индекс." >> hexlet.txt
git commit -o /usr/src/app/code-user/hexlet.txt -m "the message"
git stash
git stash pop 
git commit -m "add all files"


cd code-user/ # Переходим в директорию code-user
git add . # Так как есть изменения не добавленные в индекс
git stash
echo 'Hexlet is awesome!' > todo.md
echo 'stash не трогает новые файлы, которые еще не добавлены в индекс.' >> hexlet.txt
git add hexlet.txt
git commit -m 'refactoring'
git stash pop
git add .
git commit -m 'changes from stash'